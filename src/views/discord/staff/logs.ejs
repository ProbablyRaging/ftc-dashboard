<%- include('../partials/header') -%>

<!-- TODO: search bar sends request to API with the search
            disable button once fetched  -->

<script>
    let currentLog;
    let page = 1;
    function logsFetchBtn(logToFetch, paginate) {
        currentLog = logToFetch;
        if (paginate === 'next') {
            page++;
        } else if (paginate === "previous" && !page <= 0) {
            page--;
        }
        console.log(page)
        $.post({
            url: `/api/log-fetch`,
            type: 'POST',
            headers: { "Content-Type": "application/json" },
            dataType: 'json',
            data: JSON.stringify({ "logToFetch": `${logToFetch}`, "page": `${page}` })
        }, (data) => {
            $(".logs-table td").remove();
            const results = data;
            if (logToFetch === 'warnSchema' || logToFetch === 'muteSchema' || logToFetch === 'banSchema') {
                // Update table header with log name
                if (logToFetch === 'warnSchema') $('.logs-title').text('Warning Logs');
                if (logToFetch === 'muteSchema') $('.logs-title').text('Mute & Timeout Logs');
                if (logToFetch === 'banSchema') $('.logs-title').text('Ban & Unban Logs');
                // Remove and add theads that we need for this dataset
                if ($(".command")[0]) $(".logs-table .command").remove();
                if (!$(".info")[0]) $('.logs-table >thead tr .date').after('<th class="info">Information</th>');
                if (!$(".executor")[0]) $('.logs-table >thead tr .member').after('<th class="executor">Executor</th>');
                if ($(".command-input")[0]) $(".logs-table .command-input").remove();
                for (const entries of results) {
                    $('.logs-table tr:last').after(`<tr><td>${entries.username}</td>
                    <td>${entries.authorTag}</td>
                    <td>${new Date(entries.timestamp).toLocaleDateString("en-US", { hour: '2-digit', minute: '2-digit' })}</td>
                    <td>${entries.reason || 'No reason provided'}</td></tr>`);
                }
            }
            if (logToFetch === 'deleteSchema' || logToFetch === 'blacklistSchema') {
                // Remove and add theads that we need for this dataset// Update table header with log name
                if (logToFetch === 'deleteSchema') $('.logs-title').text('Deleted Message Logs');
                if (logToFetch === 'blacklistSchema') $('.logs-title').text('Blacklisted Message Logs');
                if ($(".command")[0]) $(".logs-table .command").remove();
                if ($(".command-input")[0]) $(".logs-table .command-input").remove();
                $(".logs-table .executor").remove();
                if (!$(".info")[0]) $('.logs-table >thead tr .date').after('<th class="info">Information</th>');
                for (const entries of results) {
                    $('.logs-table tr:last').after(`<tr><td>${entries.username}</td>
                    <td>${new Date(entries.timestamp).toLocaleDateString("en-US", { hour: '2-digit', minute: '2-digit' })}</td>
                    <td><b>Channel:</b> <channel>#${entries.channel}</channel><br><b>Message:</b> ${entries.message}</td></tr>`);
                }
            }
            if (logToFetch === 'commandSchema') {
                // Remove and add theads that we need for this dataset// Update table header with log name
                if (logToFetch === 'commandSchema') $('.logs-title').text('Command Usage Logs');
                // Remove and add theads that we need for this dataset
                $(".logs-table .executor").remove();
                $(".logs-table .info").remove();
                if (!$(".command")[0]) $('.logs-table >thead tr .member').after('<th class="command">Command</th>');
                if (!$(".command-input")[0]) $('.logs-table >thead tr .date').after('<th class="command-input">Command Input</th>');
                for (const entries of results) {
                    // Split the command entry into main and subcommand
                    const commandSplit = entries.command.split('>');
                    $('.logs-table tr:last').after(`<tr><td>${entries.username}</td>
                    <td class="command"><b>Command:</b> ${commandSplit[0]}<br><b>Subcommand:</b> ${commandSplit[1] || '-'}</td>
                    <td>${new Date(entries.timestamp).toLocaleDateString("en-US", { hour: '2-digit', minute: '2-digit' })}</td>
                    <td>${entries.input}</tr>`);
                }
            }
        });
    }
</script>

<p class="logs-title">Choose or search for a collection of logs to retrieve</p>

<div class="logs-button-wrapper">
    <button class="logs-button warnings-fetch" onclick="logsFetchBtn('warnSchema')">Warnings</button>
    <button class="logs-button mutes-fetch" onclick="logsFetchBtn('muteSchema')">Mutes & Timeouts</button>
    <button class="logs-button bans-fetch" onclick="logsFetchBtn('banSchema')">Bans & Unbans</button>
    <button class="logs-button deletes-fetch" onclick="logsFetchBtn('deleteSchema')">Deleted Messages</button>
    <button class="logs-button blacklists-fetch" onclick="logsFetchBtn('blacklistSchema')">Blacklisted Messages</button>
    <button class="logs-button commands-fetch" onclick="logsFetchBtn('commandSchema')">Command Usage</button>
</div>

<div class="pagination-wrapper">
    <div class="pagination">
        <button type="button" title="previous" class="pagination-button" onclick="logsFetchBtn(currentLog, 'previous')">
            <i class="fa fa-arrow-left"></i>
        </button>
        <p class="page-count">
            <%=  %>
        </p>
        <button type="button" title="next" class="pagination-button" onclick="logsFetchBtn(currentLog, 'next')">
            <i class="fa fa-arrow-right"></i>
        </button>
    </div>
</div>

<table class="logs-table" id="logs-table">
    <thead>
        <tr>
            <th class="member">Member</th>
            <th class="executor">Executor</th>
            <th class="date">Date</th>
            <th class="info">Information</th>
        </tr>
    </thead>
    <% // for (const data of results) { %>
    <tbody>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
        </tr>
    </tbody>
    <% // } %>
</table>













<style>
    .logs-button-wrapper {
        display: flex;
        gap: 20px;
        margin-bottom: 48px;
    }

    .logs-button {
        color: var(--nav-text);
        font-weight: 600;
        width: 170px;
        background: var(--btn);
        border-radius: 6px;
        box-sizing: var(--bs);
        border: var(--border-l);
        box-shadow: var(--bs-s);
        padding: 10px 0;
    }

    .logs-button:hover {
        background-color: var(--btn-hov);
    }

    .logs-title {
        color: var(--text);
        font-size: 20px;
        font-weight: 500;
        margin-bottom: 24px;
    }

    .logs-search {
        width: 300px;
        height: 42px;
        padding: 5px;
        margin-bottom: 20px;
        color: var(--text) !important;
        background: var(--accent);
        border: var(--border-l);
        border-radius: 6px;
        box-shadow: var(--bs-s);
    }

    .logs-table {
        font-size: 12px;
        width: 100%;
        box-shadow: var(--bs-s);
    }

    .logs-table b {
        font-weight: 900;
    }

    .logs-table thead {
        color: var(--text) !important;
        font-weight: var(--w-5);
    }

    .logs-table tbody {
        color: var(--text-alt);
        background: var(--accent);
        border-bottom: var(--border-l);
        border-right: var(--border-l);
        border-left: var(--border-l);
    }

    .logs-table td {
        padding: 6px;
        height: 30px;
        border-right: var(--border-l);
    }

    .logs-table th {
        background: var(--bg-alt);
        padding: 6px;
        border: var(--border-l);
        filter: brightness(0.9);
    }

    .logs-table tr:hover {
        color: var(--text);
        background: var(--bg-o);
    }

    .logs-table td:nth-child(3) {
        min-width: 140px;
    }

    .logs-table .command {
        text-transform: capitalize;
    }
</style>

<%- include('../partials/footer') -%>